import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface VulnerabilityRequest {
  target_url: string;
  scan_type: string;
  user_id: string;
}

interface CVEResult {
  id: string;
  summary: string;
  cvss: number;
  severity: string;
  published: string;
  modified: string;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Initialize Supabase client
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
    )

    const { target_url, scan_type }: VulnerabilityRequest = await req.json()

    // Validate input
    if (!target_url || !scan_type) {
      return new Response(
        JSON.stringify({ error: 'Missing required fields' }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    // Get authenticated user from Authorization header
    const authHeader = req.headers.get('Authorization')
    if (!authHeader) {
      return new Response(
        JSON.stringify({ error: 'Missing Authorization header' }),
        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }
    const token = authHeader.replace('Bearer ', '')
    const { data: userData, error: userError } = await supabaseClient.auth.getUser(token)
    if (userError || !userData?.user) {
      return new Response(
        JSON.stringify({ error: 'Unauthorized' }),
        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }
    const authedUserId = userData.user.id

    // Create scan record
    const { data: scanData, error: scanError } = await supabaseClient
      .from('vulnerability_scans')
      .insert({
        user_id: authedUserId,
        target_url,
        scan_type,
        status: 'running',
        started_at: new Date().toISOString()
      })
      .select()
      .single()

    if (scanError) {
      throw scanError
    }

    // Extract domain from URL for CVE search
    const domain = new URL(target_url).hostname
    const vulnerabilities: CVEResult[] = []

    // Search for vulnerabilities using CIRCL CVE Search API
    try {
      const cveResponse = await fetch(`https://cve.circl.lu/api/search/${encodeURIComponent(domain)}`)
      if (cveResponse.ok) {
        const cveData = await cveResponse.json()
        
        // Process CVE results
        if (cveData && Array.isArray(cveData)) {
          for (const cve of cveData.slice(0, 10)) { // Limit to 10 results
            vulnerabilities.push({
              id: cve.id || 'Unknown',
              summary: cve.summary || 'No summary available',
              cvss: cve.cvss || 0,
              severity: getCVSSSeverity(cve.cvss || 0),
              published: cve.Published || 'Unknown',
              modified: cve.Modified || 'Unknown'
            })
          }
        }
      }
    } catch (error) {
      console.error('CVE API error:', error)
    }

    // Perform additional security checks
    const additionalChecks = await performSecurityChecks(target_url)
    
    // Calculate risk score
    const riskScore = calculateRiskScore(vulnerabilities, additionalChecks)

    // Store vulnerability details
    for (const vuln of vulnerabilities) {
      await supabaseClient
        .from('vulnerability_details')
        .insert({
          scan_id: scanData.id,
          vulnerability_type: 'CVE',
          severity: vuln.severity,
          description: vuln.summary,
          location: target_url,
          cvss_score: vuln.cvss,
          cve_id: vuln.id
        })
    }

    // Update scan with results
    const { error: updateError } = await supabaseClient
      .from('vulnerability_scans')
      .update({
        status: 'completed',
        completed_at: new Date().toISOString(),
        results: {
          vulnerabilities,
          additional_checks: additionalChecks,
          scan_summary: {
            total_vulnerabilities: vulnerabilities.length,
            critical_count: vulnerabilities.filter(v => v.severity === 'critical').length,
            high_count: vulnerabilities.filter(v => v.severity === 'high').length,
            medium_count: vulnerabilities.filter(v => v.severity === 'medium').length,
            low_count: vulnerabilities.filter(v => v.severity === 'low').length
          }
        },
        vulnerabilities_found: vulnerabilities.length,
        risk_score: riskScore,
        scan_duration: Math.floor((Date.now() - new Date(scanData.started_at).getTime()) / 1000)
      })
      .eq('id', scanData.id)

    if (updateError) {
      throw updateError
    }

    return new Response(
      JSON.stringify({
        success: true,
        scan_id: scanData.id,
        vulnerabilities_found: vulnerabilities.length,
        risk_score: riskScore,
        vulnerabilities: vulnerabilities,
        additional_checks: additionalChecks
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )

  } catch (error) {
    console.error('Vulnerability scanner error:', error)
    return new Response(
      JSON.stringify({ 
        error: 'Internal server error',
        details: error.message 
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )
  }
})

function getCVSSSeverity(cvss: number): string {
  if (cvss >= 9.0) return 'critical'
  if (cvss >= 7.0) return 'high'
  if (cvss >= 4.0) return 'medium'
  return 'low'
}

async function performSecurityChecks(url: string): Promise<any> {
  const checks = {
    ssl_check: false,
    headers_check: false,
    port_scan: false,
    dns_check: false
  }

  try {
    // Basic HTTP security headers check
    const response = await fetch(url, { method: 'HEAD' })
    const headers = response.headers

    checks.ssl_check = url.startsWith('https://')
    checks.headers_check = !!(
      headers.get('strict-transport-security') ||
      headers.get('x-frame-options') ||
      headers.get('x-content-type-options') ||
      headers.get('x-xss-protection')
    )

    // DNS resolution check
    try {
      const domain = new URL(url).hostname
      checks.dns_check = true // If we got here, DNS resolved
    } catch {
      checks.dns_check = false
    }

  } catch (error) {
    console.error('Security checks error:', error)
  }

  return checks
}

function calculateRiskScore(vulnerabilities: CVEResult[], additionalChecks: any): number {
  let score = 0

  // Add points for vulnerabilities
  vulnerabilities.forEach(vuln => {
    switch (vuln.severity) {
      case 'critical': score += 10; break
      case 'high': score += 7; break
      case 'medium': score += 4; break
      case 'low': score += 1; break
    }
  })

  // Deduct points for good security practices
  if (additionalChecks.ssl_check) score -= 2
  if (additionalChecks.headers_check) score -= 3

  return Math.max(0, Math.min(100, score)) // Cap between 0-100
}

