import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { toolExecutionService } from '@/services/toolExecutionService';
import { useAuthStore } from '@/store/authStore';
import { 
  Shield, 
  AlertTriangle, 
  CheckCircle, 
  XCircle,
  Clock,
  Target,
  Eye,
  Bug,
  Zap,
  Activity
} from 'lucide-react';

export const VulnerabilityScanner = () => {
  const { user } = useAuthStore();
  const { toast } = useToast();
  
  const [targetUrl, setTargetUrl] = useState('');
  const [scanType, setScanType] = useState('comprehensive');
  const [isScanning, setIsScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [results, setResults] = useState<any>(null);
  const [scanHistory, setScanHistory] = useState<any[]>([]);

  useEffect(() => {
    if (user) {
      loadScanHistory();
    }
  }, [user]);

  const loadScanHistory = async () => {
    if (!user) return;
    
    const result = await toolExecutionService.getExecutionHistory(user.id, 5);
    if (result.success) {
      setScanHistory(result.data);
    }
  };

  const startVulnerabilityScan = async () => {
    if (!user) {
      toast({
        title: "Authentication Required",
        description: "Please log in to use the vulnerability scanner",
        variant: "destructive",
      });
      return;
    }

    if (!targetUrl) {
      toast({
        title: "Target Required",
        description: "Please enter a target URL to scan",
        variant: "destructive",
      });
      return;
    }

    setIsScanning(true);
    setProgress(0);
    setResults(null);

    try {
      // Simulate progress updates
      const progressInterval = setInterval(() => {
        setProgress(prev => {
          if (prev >= 90) return prev;
          return prev + Math.random() * 10;
        });
      }, 1000);

      const result = await toolExecutionService.executeVulnerabilityScanner({
        target_url: targetUrl,
        scan_type: scanType,
        user_id: user.id,
      });

      clearInterval(progressInterval);
      setProgress(100);

      if (result.success) {
        setResults(result.data);
        toast({
          title: "Scan Complete",
          description: "Vulnerability scan completed successfully",
        });
        await loadScanHistory();
      } else {
        throw new Error(result.error || 'Scan failed');
      }
    } catch (error: any) {
      toast({
        title: "Scan Failed",
        description: error.message || 'Failed to complete vulnerability scan',
        variant: "destructive",
      });
    } finally {
      setIsScanning(false);
      setTimeout(() => setProgress(0), 2000);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity?.toLowerCase()) {
      case 'critical': return 'text-red-500 border-red-500';
      case 'high': return 'text-orange-500 border-orange-500';
      case 'medium': return 'text-yellow-500 border-yellow-500';
      case 'low': return 'text-green-500 border-green-500';
      default: return 'text-gray-500 border-gray-500';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity?.toLowerCase()) {
      case 'critical': return <AlertTriangle className="w-4 h-4" />;
      case 'high': return <XCircle className="w-4 h-4" />;
      case 'medium': return <Clock className="w-4 h-4" />;
      case 'low': return <CheckCircle className="w-4 h-4" />;
      default: return <Eye className="w-4 h-4" />;
    }
  };

  return (
    <div className="min-h-screen bg-black p-6">
      <div className="max-w-6xl mx-auto space-y-6">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold bg-gradient-to-r from-red-400 via-orange-500 to-red-600 bg-clip-text text-transparent mb-4">
            Advanced Vulnerability Scanner
          </h1>
          <p className="text-xl text-gray-300">
            Military-grade vulnerability detection with AI-powered analysis
          </p>
          <div className="flex items-center justify-center gap-4 mt-4">
            <Badge variant="outline" className="text-red-400 border-red-400">
              <Shield className="w-4 h-4 mr-1" />
              Elite Tier
            </Badge>
            <Badge variant="outline" className="text-orange-400 border-orange-400">
              <Bug className="w-4 h-4 mr-1" />
              Zero-Day Detection
            </Badge>
            <Badge variant="outline" className="text-purple-400 border-purple-400">
              <Zap className="w-4 h-4 mr-1" />
              AI Powered
            </Badge>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Scanner Configuration */}
          <Card className="lg:col-span-2 bg-gray-900/50 border-gray-700">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <Target className="w-5 h-5 text-red-400" />
                Scan Configuration
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="target-url" className="text-cyan-400">
                  Target URL
                </Label>
                <Input
                  id="target-url"
                  value={targetUrl}
                  onChange={(e) => setTargetUrl(e.target.value)}
                  placeholder="https://example.com"
                  className="bg-gray-800/50 border-gray-600 text-white"
                  disabled={isScanning}
                />
              </div>

              <div>
                <Label htmlFor="scan-type" className="text-cyan-400">
                  Scan Type
                </Label>
                <Select value={scanType} onValueChange={setScanType} disabled={isScanning}>
                  <SelectTrigger className="bg-gray-800/50 border-gray-600 text-white">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="quick">Quick Scan (5-10 min)</SelectItem>
                    <SelectItem value="comprehensive">Comprehensive (15-30 min)</SelectItem>
                    <SelectItem value="deep">Deep Analysis (30-60 min)</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {isScanning && (
                <div className="space-y-2">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-cyan-400">Scanning Progress</span>
                    <span className="text-cyan-400 font-mono">{Math.round(progress)}%</span>
                  </div>
                  <Progress value={progress} className="w-full" />
                  <p className="text-sm text-gray-400">
                    Analyzing target for vulnerabilities...
                  </p>
                </div>
              )}

              <Button 
                onClick={startVulnerabilityScan}
                disabled={isScanning || !targetUrl}
                className="w-full bg-gradient-to-r from-red-600 to-red-700 hover:from-red-500 hover:to-red-600"
              >
                {isScanning ? (
                  <div className="flex items-center gap-2">
                    <Activity className="w-4 h-4 animate-pulse" />
                    Scanning...
                  </div>
                ) : (
                  <div className="flex items-center gap-2">
                    <Shield className="w-4 h-4" />
                    Start Vulnerability Scan
                  </div>
                )}
              </Button>
            </CardContent>
          </Card>

          {/* Scan History */}
          <Card className="bg-gray-900/50 border-gray-700">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <Clock className="w-5 h-5 text-blue-400" />
                Recent Scans
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {scanHistory.length > 0 ? (
                  scanHistory.map((scan, index) => (
                    <div key={index} className="p-3 bg-gray-800/50 rounded-lg border border-gray-600">
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-sm text-gray-300 truncate">
                          {scan.target_url}
                        </span>
                        <Badge 
                          variant="outline" 
                          className={`text-xs ${getSeverityColor(scan.risk_score > 70 ? 'high' : scan.risk_score > 40 ? 'medium' : 'low')}`}
                        >
                          {scan.risk_score}/100
                        </Badge>
                      </div>
                      <div className="text-xs text-gray-400">
                        {new Date(scan.created_at).toLocaleDateString()}
                      </div>
                    </div>
                  ))
                ) : (
                  <p className="text-gray-400 text-sm text-center py-4">
                    No scan history available
                  </p>
                )}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Results */}
        {results && (
          <Card className="bg-gray-900/50 border-gray-700">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <Eye className="w-5 h-5 text-green-400" />
                Scan Results
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div className="bg-gray-800/50 p-4 rounded-lg text-center">
                  <div className="text-2xl font-bold text-white">{results.scan_duration || 'N/A'}s</div>
                  <div className="text-sm text-gray-400">Scan Duration</div>
                </div>
                <div className="bg-gray-800/50 p-4 rounded-lg text-center">
                  <div className="text-2xl font-bold text-red-400">{results.vulnerabilities_found || 0}</div>
                  <div className="text-sm text-gray-400">Vulnerabilities</div>
                </div>
                <div className="bg-gray-800/50 p-4 rounded-lg text-center">
                  <div className="text-2xl font-bold text-orange-400">{results.risk_score || 0}/100</div>
                  <div className="text-sm text-gray-400">Risk Score</div>
                </div>
                <div className="bg-gray-800/50 p-4 rounded-lg text-center">
                  <div className="text-2xl font-bold text-cyan-400">
                    {results.summary?.total_checks || 'N/A'}
                  </div>
                  <div className="text-sm text-gray-400">Total Checks</div>
                </div>
              </div>

              {results.vulnerabilities && results.vulnerabilities.length > 0 && (
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold text-white">Vulnerabilities Found</h3>
                  {results.vulnerabilities.map((vuln: any, index: number) => (
                    <div key={index} className="p-4 bg-gray-800/30 rounded-lg border border-gray-600">
                      <div className="flex items-center gap-2 mb-2">
                        {getSeverityIcon(vuln.severity)}
                        <Badge 
                          variant="outline" 
                          className={getSeverityColor(vuln.severity)}
                        >
                          {vuln.severity?.toUpperCase()}
                        </Badge>
                        <span className="text-white font-medium">{vuln.title}</span>
                      </div>
                      <p className="text-gray-300 text-sm mb-2">{vuln.description}</p>
                      {vuln.recommendation && (
                        <div className="text-sm">
                          <span className="text-green-400 font-medium">Recommendation: </span>
                          <span className="text-gray-300">{vuln.recommendation}</span>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}

              {results.recommendations && results.recommendations.length > 0 && (
                <div className="mt-6">
                  <h3 className="text-lg font-semibold text-white mb-4">Security Recommendations</h3>
                  <div className="space-y-2">
                    {results.recommendations.map((rec: string, index: number) => (
                      <div key={index} className="flex items-start gap-2">
                        <CheckCircle className="w-4 h-4 text-green-400 mt-0.5 flex-shrink-0" />
                        <span className="text-gray-300 text-sm">{rec}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
};

export default VulnerabilityScanner;