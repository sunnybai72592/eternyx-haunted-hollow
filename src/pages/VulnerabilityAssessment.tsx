import React, { useState, useEffect } from 'react';
import { 
  Shield, 
  Search, 
  AlertTriangle, 
  CheckCircle, 
  XCircle,
  Clock,
  TrendingUp,
  Database,
  Globe,
  Server,
  Wifi,
  Code,
  Lock,
  Eye,
  Download,
  Filter,
  RefreshCw,
  Play,
  Pause
} from 'lucide-react';

interface Asset {
  id: string;
  name: string;
  type: 'web' | 'network' | 'database' | 'mobile';
  ip?: string;
  url?: string;
  lastScan?: Date;
  riskScore: number;
  vulnerabilities: number;
}

interface VulnerabilityItem {
  id: string;
  title: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  cvss: number;
  cve?: string;
  asset: string;
  description: string;
  impact: string;
  solution: string;
  discovered: Date;
  status: 'open' | 'in-progress' | 'resolved' | 'false-positive';
}

const VulnerabilityAssessment: React.FC = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [assets, setAssets] = useState<Asset[]>([]);
  const [vulnerabilities, setVulnerabilities] = useState<VulnerabilityItem[]>([]);
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [filterSeverity, setFilterSeverity] = useState('all');
  const [filterStatus, setFilterStatus] = useState('all');

  // Initialize sample data
  useEffect(() => {
    const sampleAssets: Asset[] = [
      {
        id: '1',
        name: 'Main Website',
        type: 'web',
        url: 'https://example.com',
        lastScan: new Date(Date.now() - 86400000),
        riskScore: 85,
        vulnerabilities: 12
      },
      {
        id: '2',
        name: 'Database Server',
        type: 'database',
        ip: '192.168.1.100',
        lastScan: new Date(Date.now() - 172800000),
        riskScore: 92,
        vulnerabilities: 8
      },
      {
        id: '3',
        name: 'API Gateway',
        type: 'network',
        ip: '192.168.1.50',
        lastScan: new Date(Date.now() - 43200000),
        riskScore: 67,
        vulnerabilities: 5
      },
      {
        id: '4',
        name: 'Mobile App Backend',
        type: 'mobile',
        url: 'https://api.example.com',
        lastScan: new Date(Date.now() - 259200000),
        riskScore: 78,
        vulnerabilities: 9
      }
    ];

    const sampleVulnerabilities: VulnerabilityItem[] = [
      {
        id: '1',
        title: 'SQL Injection in User Authentication',
        severity: 'critical',
        cvss: 9.8,
        cve: 'CVE-2023-1234',
        asset: 'Main Website',
        description: 'The user authentication system is vulnerable to SQL injection attacks through the login form.',
        impact: 'Complete database compromise, unauthorized access to all user data.',
        solution: 'Implement parameterized queries and input validation.',
        discovered: new Date(Date.now() - 86400000),
        status: 'open'
      },
      {
        id: '2',
        title: 'Unencrypted Database Connection',
        severity: 'high',
        cvss: 8.1,
        asset: 'Database Server',
        description: 'Database connections are not encrypted, allowing potential man-in-the-middle attacks.',
        impact: 'Data interception, credential theft.',
        solution: 'Enable SSL/TLS encryption for all database connections.',
        discovered: new Date(Date.now() - 172800000),
        status: 'in-progress'
      },
      {
        id: '3',
        title: 'Cross-Site Scripting (XSS)',
        severity: 'medium',
        cvss: 6.1,
        cve: 'CVE-2023-5678',
        asset: 'Main Website',
        description: 'Reflected XSS vulnerability in search functionality.',
        impact: 'Session hijacking, malicious script execution.',
        solution: 'Implement proper input sanitization and output encoding.',
        discovered: new Date(Date.now() - 259200000),
        status: 'resolved'
      },
      {
        id: '4',
        title: 'Weak Password Policy',
        severity: 'medium',
        cvss: 5.3,
        asset: 'API Gateway',
        description: 'Password policy allows weak passwords that are easily guessable.',
        impact: 'Brute force attacks, unauthorized access.',
        solution: 'Implement strong password requirements and account lockout policies.',
        discovered: new Date(Date.now() - 345600000),
        status: 'open'
      },
      {
        id: '5',
        title: 'Information Disclosure',
        severity: 'low',
        cvss: 3.7,
        asset: 'Mobile App Backend',
        description: 'Server headers reveal sensitive information about the technology stack.',
        impact: 'Information gathering for targeted attacks.',
        solution: 'Configure server to hide version information and unnecessary headers.',
        discovered: new Date(Date.now() - 432000000),
        status: 'false-positive'
      }
    ];

    setAssets(sampleAssets);
    setVulnerabilities(sampleVulnerabilities);
  }, []);

  // Simulate scanning
  useEffect(() => {
    if (isScanning) {
      const interval = setInterval(() => {
        setScanProgress(prev => {
          if (prev >= 100) {
            setIsScanning(false);
            return 100;
          }
          return prev + Math.random() * 10;
        });
      }, 1000);

      return () => clearInterval(interval);
    }
  }, [isScanning]);

  const startScan = () => {
    setIsScanning(true);
    setScanProgress(0);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-400 bg-red-500/10 border-red-500/30';
      case 'high': return 'text-orange-400 bg-orange-500/10 border-orange-500/30';
      case 'medium': return 'text-yellow-400 bg-yellow-500/10 border-yellow-500/30';
      case 'low': return 'text-blue-400 bg-blue-500/10 border-blue-500/30';
      default: return 'text-gray-400 bg-gray-500/10 border-gray-500/30';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'text-red-400 bg-red-500/10';
      case 'in-progress': return 'text-yellow-400 bg-yellow-500/10';
      case 'resolved': return 'text-green-400 bg-green-500/10';
      case 'false-positive': return 'text-gray-400 bg-gray-500/10';
      default: return 'text-gray-400 bg-gray-500/10';
    }
  };

  const getAssetIcon = (type: string) => {
    switch (type) {
      case 'web': return Globe;
      case 'database': return Database;
      case 'network': return Server;
      case 'mobile': return Wifi;
      default: return Server;
    }
  };

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const severityMatch = filterSeverity === 'all' || vuln.severity === filterSeverity;
    const statusMatch = filterStatus === 'all' || vuln.status === filterStatus;
    return severityMatch && statusMatch;
  });

  const renderDashboard = () => (
    <div className="space-y-6">
      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="cyber-card p-6 text-center">
          <div className="text-3xl font-bold text-cyber-pink mb-2">
            {assets.length}
          </div>
          <div className="text-gray-400">Total Assets</div>
        </div>
        <div className="cyber-card p-6 text-center">
          <div className="text-3xl font-bold text-red-400 mb-2">
            {vulnerabilities.filter(v => v.status === 'open').length}
          </div>
          <div className="text-gray-400">Open Vulnerabilities</div>
        </div>
        <div className="cyber-card p-6 text-center">
          <div className="text-3xl font-bold text-orange-400 mb-2">
            {vulnerabilities.filter(v => v.severity === 'critical' || v.severity === 'high').length}
          </div>
          <div className="text-gray-400">High Risk Issues</div>
        </div>
        <div className="cyber-card p-6 text-center">
          <div className="text-3xl font-bold text-green-400 mb-2">
            {Math.round(assets.reduce((acc, asset) => acc + (100 - asset.riskScore), 0) / assets.length)}%
          </div>
          <div className="text-gray-400">Security Score</div>
        </div>
      </div>

      {/* Risk Trend Chart */}
      <div className="cyber-card p-6">
        <h3 className="text-xl font-bold text-cyber-pink mb-4 flex items-center">
          <TrendingUp className="h-6 w-6 mr-2" />
          Risk Trend Analysis
        </h3>
        <div className="h-64 bg-black/30 rounded-lg flex items-center justify-center">
          <div className="text-gray-400">Risk trend visualization would be displayed here</div>
        </div>
      </div>

      {/* Recent Vulnerabilities */}
      <div className="cyber-card p-6">
        <h3 className="text-xl font-bold text-cyber-pink mb-4 flex items-center">
          <AlertTriangle className="h-6 w-6 mr-2" />
          Recent Critical Findings
        </h3>
        <div className="space-y-3">
          {vulnerabilities
            .filter(v => v.severity === 'critical' || v.severity === 'high')
            .slice(0, 3)
            .map((vuln) => (
              <div key={vuln.id} className={`p-4 border rounded-lg ${getSeverityColor(vuln.severity)}`}>
                <div className="flex items-center justify-between">
                  <div>
                    <div className="font-bold text-white">{vuln.title}</div>
                    <div className="text-sm text-gray-400">{vuln.asset}</div>
                  </div>
                  <div className="text-right">
                    <div className={`text-sm px-2 py-1 rounded ${getSeverityColor(vuln.severity)}`}>
                      {vuln.severity.toUpperCase()}
                    </div>
                    <div className="text-xs text-gray-500 mt-1">
                      CVSS: {vuln.cvss}
                    </div>
                  </div>
                </div>
              </div>
            ))}
        </div>
      </div>
    </div>
  );

  const renderAssets = () => (
    <div className="space-y-6">
      {/* Scan Controls */}
      <div className="cyber-card p-6">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-xl font-bold text-cyber-pink flex items-center">
            <Search className="h-6 w-6 mr-2" />
            Asset Discovery & Scanning
          </h3>
          <div className="flex space-x-2">
            <button 
              onClick={startScan}
              disabled={isScanning}
              className="flex items-center px-4 py-2 bg-cyber-pink/20 border border-cyber-pink text-cyber-pink rounded-lg hover:bg-cyber-pink/30 transition-colors disabled:opacity-50"
            >
              {isScanning ? <Pause className="h-4 w-4 mr-2" /> : <Play className="h-4 w-4 mr-2" />}
              {isScanning ? 'Scanning...' : 'Start Scan'}
            </button>
            <button className="flex items-center px-4 py-2 bg-gray-500/20 border border-gray-500 text-gray-400 rounded-lg hover:bg-gray-500/30 transition-colors">
              <RefreshCw className="h-4 w-4 mr-2" />
              Refresh
            </button>
          </div>
        </div>

        {isScanning && (
          <div className="mb-4">
            <div className="flex justify-between text-sm mb-2">
              <span>Scanning Progress</span>
              <span>{Math.round(scanProgress)}%</span>
            </div>
            <div className="w-full bg-gray-700 rounded-full h-2">
              <div 
                className="bg-cyber-pink h-2 rounded-full transition-all duration-500"
                style={{ width: `${scanProgress}%` }}
              ></div>
            </div>
          </div>
        )}
      </div>

      {/* Assets List */}
      <div className="cyber-card p-6">
        <h3 className="text-xl font-bold text-cyber-pink mb-4">Discovered Assets</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {assets.map((asset) => {
            const IconComponent = getAssetIcon(asset.type);
            return (
              <div key={asset.id} className="p-4 bg-black/30 border border-cyber-pink/20 rounded-lg">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center space-x-3">
                    <div className="p-2 bg-cyber-pink/20 rounded-lg">
                      <IconComponent className="h-5 w-5 text-cyber-pink" />
                    </div>
                    <div>
                      <div className="font-bold text-white">{asset.name}</div>
                      <div className="text-sm text-gray-400">
                        {asset.url || asset.ip}
                      </div>
                    </div>
                  </div>
                  <div className={`px-2 py-1 rounded text-xs ${
                    asset.riskScore >= 80 ? 'bg-red-500/20 text-red-400' :
                    asset.riskScore >= 60 ? 'bg-yellow-500/20 text-yellow-400' :
                    'bg-green-500/20 text-green-400'
                  }`}>
                    Risk: {asset.riskScore}
                  </div>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-400">
                    Last Scan: {asset.lastScan?.toLocaleDateString()}
                  </span>
                  <span className="text-cyber-pink">
                    {asset.vulnerabilities} vulnerabilities
                  </span>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );

  const renderVulnerabilities = () => (
    <div className="space-y-6">
      {/* Filters */}
      <div className="cyber-card p-6">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-xl font-bold text-cyber-pink flex items-center">
            <Filter className="h-6 w-6 mr-2" />
            Vulnerability Management
          </h3>
          <div className="flex space-x-4">
            <select 
              value={filterSeverity}
              onChange={(e) => setFilterSeverity(e.target.value)}
              className="px-3 py-2 bg-black/50 border border-cyber-pink/30 rounded-lg text-cyber-pink focus:border-cyber-pink focus:outline-none"
            >
              <option value="all">All Severities</option>
              <option value="critical">Critical</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
            </select>
            <select 
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
              className="px-3 py-2 bg-black/50 border border-cyber-pink/30 rounded-lg text-cyber-pink focus:border-cyber-pink focus:outline-none"
            >
              <option value="all">All Statuses</option>
              <option value="open">Open</option>
              <option value="in-progress">In Progress</option>
              <option value="resolved">Resolved</option>
              <option value="false-positive">False Positive</option>
            </select>
          </div>
        </div>
      </div>

      {/* Vulnerabilities List */}
      <div className="cyber-card p-6">
        <div className="space-y-4">
          {filteredVulnerabilities.map((vuln) => (
            <div key={vuln.id} className={`p-6 border rounded-lg ${getSeverityColor(vuln.severity)}`}>
              <div className="flex items-start justify-between mb-4">
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    <span className={`px-2 py-1 rounded text-xs font-medium ${getSeverityColor(vuln.severity)}`}>
                      {vuln.severity.toUpperCase()}
                    </span>
                    <span className={`px-2 py-1 rounded text-xs ${getStatusColor(vuln.status)}`}>
                      {vuln.status.replace('-', ' ').toUpperCase()}
                    </span>
                    {vuln.cve && (
                      <span className="px-2 py-1 bg-gray-500/20 text-gray-400 rounded text-xs">
                        {vuln.cve}
                      </span>
                    )}
                    <span className="px-2 py-1 bg-blue-500/20 text-blue-400 rounded text-xs">
                      CVSS: {vuln.cvss}
                    </span>
                  </div>
                  <h4 className="font-bold text-white text-lg mb-2">{vuln.title}</h4>
                  <div className="text-sm text-gray-400 mb-2">
                    Asset: {vuln.asset} | Discovered: {vuln.discovered.toLocaleDateString()}
                  </div>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                <div>
                  <strong className="text-white">Description:</strong>
                  <p className="text-gray-300 mt-1">{vuln.description}</p>
                </div>
                <div>
                  <strong className="text-orange-400">Impact:</strong>
                  <p className="text-gray-300 mt-1">{vuln.impact}</p>
                </div>
                <div>
                  <strong className="text-cyber-green">Solution:</strong>
                  <p className="text-gray-300 mt-1">{vuln.solution}</p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-background text-foreground p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center space-x-3 mb-4">
            <div className="p-3 bg-cyber-pink/20 rounded-lg border border-cyber-pink/30">
              <Shield className="h-8 w-8 text-cyber-pink" />
            </div>
            <div>
              <h1 className="text-3xl font-bold text-cyber-pink">Vulnerability Assessment</h1>
              <p className="text-gray-400">Comprehensive security vulnerability discovery and management</p>
            </div>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="mb-6">
          <div className="flex space-x-1 bg-black/30 p-1 rounded-lg">
            {[
              { id: 'dashboard', label: 'Dashboard', icon: TrendingUp },
              { id: 'assets', label: 'Assets', icon: Server },
              { id: 'vulnerabilities', label: 'Vulnerabilities', icon: AlertTriangle }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center px-4 py-2 rounded-lg transition-colors ${
                  activeTab === tab.id
                    ? 'bg-cyber-pink/20 text-cyber-pink border border-cyber-pink/30'
                    : 'text-gray-400 hover:text-gray-300'
                }`}
              >
                <tab.icon className="h-4 w-4 mr-2" />
                {tab.label}
              </button>
            ))}
          </div>
        </div>

        {/* Tab Content */}
        {activeTab === 'dashboard' && renderDashboard()}
        {activeTab === 'assets' && renderAssets()}
        {activeTab === 'vulnerabilities' && renderVulnerabilities()}
      </div>
    </div>
  );
};

export default VulnerabilityAssessment;

