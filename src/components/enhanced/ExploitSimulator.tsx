import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { ScrollArea } from '@/components/ui/scroll-area';
import { 
  Play, 
  Pause, 
  RotateCcw, 
  Target, 
  Zap, 
  Brain,
  AlertTriangle,
  Shield,
  Eye,
  Terminal,
  Activity,
  Cpu,
  Network,
  Database,
  Globe,
  Lock,
  Unlock,
  Bug,
  Code
} from 'lucide-react';

interface ExploitScenario {
  id: string;
  name: string;
  category: 'web' | 'network' | 'system' | 'social';
  difficulty: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  description: string;
  targetType: string;
  estimatedTime: number; // in minutes
  successRate: number; // percentage
  detectionRisk: number; // percentage
}

interface SimulationStep {
  id: string;
  name: string;
  description: string;
  status: 'pending' | 'running' | 'completed' | 'failed';
  output: string[];
  duration: number; // in seconds
}

interface SimulationResult {
  success: boolean;
  detectionTime: number; // seconds until detection
  dataExfiltrated: number; // MB
  persistenceAchieved: boolean;
  coverTracksSuccess: boolean;
  overallScore: number; // 0-100
}

export const ExploitSimulator = () => {
  const [selectedScenario, setSelectedScenario] = useState<ExploitScenario | null>(null);
  const [isRunning, setIsRunning] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);
  const [simulationSteps, setSimulationSteps] = useState<SimulationStep[]>([]);
  const [simulationResult, setSimulationResult] = useState<SimulationResult | null>(null);
  const [progress, setProgress] = useState(0);

  const exploitScenarios: ExploitScenario[] = [
    {
      id: 'web-app-takeover',
      name: 'Web Application Takeover',
      category: 'web',
      difficulty: 'intermediate',
      description: 'Complete compromise of a vulnerable web application through SQL injection and privilege escalation',
      targetType: 'E-commerce Platform',
      estimatedTime: 15,
      successRate: 78,
      detectionRisk: 35
    },
    {
      id: 'network-lateral-movement',
      name: 'Network Lateral Movement',
      category: 'network',
      difficulty: 'advanced',
      description: 'Gain initial foothold and move laterally through corporate network infrastructure',
      targetType: 'Corporate Network',
      estimatedTime: 45,
      successRate: 62,
      detectionRisk: 55
    },
    {
      id: 'privilege-escalation',
      name: 'Privilege Escalation Attack',
      category: 'system',
      difficulty: 'expert',
      description: 'Escalate from user-level access to administrative privileges on target system',
      targetType: 'Linux Server',
      estimatedTime: 30,
      successRate: 45,
      detectionRisk: 70
    },
    {
      id: 'social-engineering',
      name: 'Social Engineering Campaign',
      category: 'social',
      difficulty: 'beginner',
      description: 'Phishing campaign targeting employees to gain initial access credentials',
      targetType: 'Corporate Employees',
      estimatedTime: 60,
      successRate: 85,
      detectionRisk: 25
    }
  ];

  const startSimulation = async () => {
    if (!selectedScenario) return;

    setIsRunning(true);
    setProgress(0);
    setCurrentStep(0);
    setSimulationResult(null);

    // Generate simulation steps based on scenario
    const steps: SimulationStep[] = [
      {
        id: 'reconnaissance',
        name: 'Reconnaissance',
        description: 'Gathering intelligence about the target',
        status: 'pending',
        output: [],
        duration: 5
      },
      {
        id: 'initial-access',
        name: 'Initial Access',
        description: 'Attempting to gain initial foothold',
        status: 'pending',
        output: [],
        duration: 8
      },
      {
        id: 'persistence',
        name: 'Establish Persistence',
        description: 'Creating backdoors for continued access',
        status: 'pending',
        output: [],
        duration: 6
      },
      {
        id: 'privilege-escalation',
        name: 'Privilege Escalation',
        description: 'Escalating privileges to gain admin access',
        status: 'pending',
        output: [],
        duration: 10
      },
      {
        id: 'data-exfiltration',
        name: 'Data Exfiltration',
        description: 'Extracting sensitive information',
        status: 'pending',
        output: [],
        duration: 7
      },
      {
        id: 'cover-tracks',
        name: 'Cover Tracks',
        description: 'Removing evidence of the attack',
        status: 'pending',
        output: [],
        duration: 4
      }
    ];

    setSimulationSteps(steps);

    // Execute simulation steps
    for (let i = 0; i < steps.length; i++) {
      setCurrentStep(i);
      setSimulationSteps(prev => prev.map((step, index) => 
        index === i ? { ...step, status: 'running' } : step
      ));

      // Simulate step execution
      await new Promise(resolve => {
        let stepProgress = 0;
        const stepInterval = setInterval(() => {
          stepProgress += 10;
          setProgress((i * 100 + stepProgress) / steps.length);
          
          // Add output messages
          if (stepProgress === 30) {
            setSimulationSteps(prev => prev.map((step, index) => 
              index === i ? { 
                ...step, 
                output: [...step.output, `Executing ${step.name.toLowerCase()}...`]
              } : step
            ));
          }
          
          if (stepProgress === 70) {
            setSimulationSteps(prev => prev.map((step, index) => 
              index === i ? { 
                ...step, 
                output: [...step.output, `${step.name} in progress...`]
              } : step
            ));
          }

          if (stepProgress >= 100) {
            clearInterval(stepInterval);
            setSimulationSteps(prev => prev.map((step, index) => 
              index === i ? { 
                ...step, 
                status: Math.random() > 0.2 ? 'completed' : 'failed',
                output: [...step.output, `${step.name} ${Math.random() > 0.2 ? 'completed successfully' : 'failed'}`]
              } : step
            ));
            resolve(void 0);
          }
        }, 200);
      });
    }

    // Generate final results
    const result: SimulationResult = {
      success: Math.random() > 0.3,
      detectionTime: Math.floor(Math.random() * 300) + 60,
      dataExfiltrated: Math.floor(Math.random() * 500) + 50,
      persistenceAchieved: Math.random() > 0.4,
      coverTracksSuccess: Math.random() > 0.5,
      overallScore: Math.floor(Math.random() * 40) + 60
    };

    setSimulationResult(result);
    setIsRunning(false);
  };

  const resetSimulation = () => {
    setIsRunning(false);
    setProgress(0);
    setCurrentStep(0);
    setSimulationSteps([]);
    setSimulationResult(null);
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return 'text-green-400 border-green-400/50';
      case 'intermediate': return 'text-yellow-400 border-yellow-400/50';
      case 'advanced': return 'text-orange-400 border-orange-400/50';
      case 'expert': return 'text-red-400 border-red-400/50';
      default: return 'text-blue-400 border-blue-400/50';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'web': return <Globe className="h-4 w-4" />;
      case 'network': return <Network className="h-4 w-4" />;
      case 'system': return <Terminal className="h-4 w-4" />;
      case 'social': return <Eye className="h-4 w-4" />;
      default: return <Bug className="h-4 w-4" />;
    }
  };

  const getStepStatusIcon = (status: string) => {
    switch (status) {
      case 'completed': return <Shield className="h-4 w-4 text-green-400" />;
      case 'failed': return <AlertTriangle className="h-4 w-4 text-red-400" />;
      case 'running': return <Activity className="h-4 w-4 text-blue-400 animate-pulse" />;
      default: return <Target className="h-4 w-4 text-muted-foreground" />;
    }
  };

  return (
    <div className="max-w-7xl mx-auto p-6">
      <div className="mb-8">
        <h2 className="text-3xl font-bold text-primary mb-2 glitch" data-text="EXPLOIT SIMULATOR">
          EXPLOIT SIMULATOR
        </h2>
        <p className="text-muted-foreground">
          AI-driven attack simulations for security training and assessment
        </p>
      </div>

      <div className="grid md:grid-cols-3 gap-6">
        {/* Scenario Selection */}
        <Card className="bg-card/50 backdrop-blur-sm border-primary/20 neon-border p-6">
          <h3 className="text-xl font-bold text-primary mb-4">Attack Scenarios</h3>
          
          <div className="space-y-3">
            {exploitScenarios.map((scenario) => (
              <Card
                key={scenario.id}
                className={`p-4 cursor-pointer transition-all duration-300 hover:scale-105 border ${
                  selectedScenario?.id === scenario.id 
                    ? 'border-primary bg-primary/10' 
                    : 'border-primary/20 bg-background/30'
                }`}
                onClick={() => setSelectedScenario(scenario)}
              >
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center space-x-2">
                    {getCategoryIcon(scenario.category)}
                    <span className="font-medium text-sm">{scenario.name}</span>
                  </div>
                  <Badge variant="outline" className={getDifficultyColor(scenario.difficulty)}>
                    {scenario.difficulty.toUpperCase()}
                  </Badge>
                </div>
                
                <p className="text-xs text-muted-foreground mb-3">{scenario.description}</p>
                
                <div className="grid grid-cols-2 gap-2 text-xs">
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Success:</span>
                    <span className="text-green-400">{scenario.successRate}%</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Detection:</span>
                    <span className="text-red-400">{scenario.detectionRisk}%</span>
                  </div>
                </div>
              </Card>
            ))}
          </div>

          {selectedScenario && (
            <div className="mt-6 space-y-3">
              <Button
                onClick={startSimulation}
                disabled={isRunning}
                className="w-full bg-primary hover:bg-primary/80 neon-border"
              >
                <Play className="h-4 w-4 mr-2" />
                {isRunning ? 'Simulation Running...' : 'Start Simulation'}
              </Button>
              
              <Button
                onClick={resetSimulation}
                variant="outline"
                className="w-full border-red-400/50 text-red-400"
              >
                <RotateCcw className="h-4 w-4 mr-2" />
                Reset
              </Button>
            </div>
          )}
        </Card>

        {/* Simulation Progress */}
        <Card className="bg-card/50 backdrop-blur-sm border-primary/20 neon-border p-6">
          <h3 className="text-xl font-bold text-primary mb-4">Simulation Progress</h3>
          
          {selectedScenario ? (
            <div className="space-y-4">
              <div className="p-4 bg-background/50 rounded border border-primary/20">
                <h4 className="font-bold text-primary mb-2">{selectedScenario.name}</h4>
                <p className="text-sm text-muted-foreground mb-3">{selectedScenario.description}</p>
                <div className="grid grid-cols-2 gap-3 text-xs">
                  <div className="flex justify-between">
                    <span>Target:</span>
                    <span className="text-blue-400">{selectedScenario.targetType}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Duration:</span>
                    <span className="text-yellow-400">{selectedScenario.estimatedTime}m</span>
                  </div>
                </div>
              </div>

              {isRunning && (
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>Overall Progress</span>
                    <span>{Math.round(progress)}%</span>
                  </div>
                  <Progress value={progress} className="h-2" />
                </div>
              )}

              <div className="space-y-2">
                {simulationSteps.map((step, index) => (
                  <div
                    key={step.id}
                    className={`p-3 rounded border transition-all duration-300 ${
                      index === currentStep && isRunning
                        ? 'border-primary bg-primary/10'
                        : step.status === 'completed'
                        ? 'border-green-400/50 bg-green-500/10'
                        : step.status === 'failed'
                        ? 'border-red-400/50 bg-red-500/10'
                        : 'border-primary/20 bg-background/30'
                    }`}
                  >
                    <div className="flex items-center space-x-3">
                      {getStepStatusIcon(step.status)}
                      <div className="flex-1">
                        <div className="text-sm font-medium">{step.name}</div>
                        <div className="text-xs text-muted-foreground">{step.description}</div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ) : (
            <div className="text-center py-12">
              <Target className="h-16 w-16 text-primary mx-auto mb-4 animate-pulse" />
              <p className="text-muted-foreground">
                Select an attack scenario to begin simulation
              </p>
            </div>
          )}
        </Card>

        {/* Terminal Output */}
        <Card className="bg-card/50 backdrop-blur-sm border-primary/20 neon-border p-6">
          <h3 className="text-xl font-bold text-primary mb-4 flex items-center">
            <Terminal className="h-5 w-5 mr-2" />
            Terminal Output
          </h3>
          
          <div className="bg-background/80 rounded p-4 border border-primary/20 h-96">
            <ScrollArea className="h-full">
              <div className="font-mono text-xs space-y-1">
                <div className="text-green-400">ETERNYX Exploit Simulator v3.0</div>
                <div className="text-blue-400">Neural Attack Framework Initialized</div>
                <div className="text-muted-foreground">Ready for simulation...</div>
                
                {simulationSteps.map((step, index) => (
                  <div key={step.id}>
                    {step.output.map((output, outputIndex) => (
                      <div key={outputIndex} className={`${
                        step.status === 'completed' ? 'text-green-400' :
                        step.status === 'failed' ? 'text-red-400' :
                        step.status === 'running' ? 'text-yellow-400' :
                        'text-muted-foreground'
                      }`}>
                        [{step.id}] {output}
                      </div>
                    ))}
                  </div>
                ))}
                
                {isRunning && (
                  <div className="text-green-400 typing-cursor animate-pulse">
                    [SYSTEM] Executing attack vector...
                  </div>
                )}
                
                {!isRunning && simulationSteps.length === 0 && (
                  <div className="text-green-400 typing-cursor">$</div>
                )}
              </div>
            </ScrollArea>
          </div>

          {simulationResult && (
            <div className="mt-4 p-4 bg-background/50 rounded border border-primary/20">
              <h4 className="font-bold text-primary mb-3">Simulation Results</h4>
              <div className="grid grid-cols-2 gap-3 text-xs">
                <div className="flex justify-between">
                  <span>Success:</span>
                  <span className={simulationResult.success ? 'text-green-400' : 'text-red-400'}>
                    {simulationResult.success ? 'YES' : 'NO'}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span>Detection Time:</span>
                  <span className="text-yellow-400">{simulationResult.detectionTime}s</span>
                </div>
                <div className="flex justify-between">
                  <span>Data Exfiltrated:</span>
                  <span className="text-blue-400">{simulationResult.dataExfiltrated}MB</span>
                </div>
                <div className="flex justify-between">
                  <span>Overall Score:</span>
                  <span className="text-purple-400">{simulationResult.overallScore}/100</span>
                </div>
              </div>
            </div>
          )}
        </Card>
      </div>

      {/* AI Recommendations */}
      {simulationResult && (
        <Card className="mt-6 bg-gradient-to-r from-purple-500/10 to-blue-500/10 border-purple-400/20 neon-border p-6">
          <h3 className="text-xl font-bold text-primary mb-4 flex items-center">
            <Brain className="h-5 w-5 mr-2" />
            AI Analysis & Recommendations
          </h3>
          
          <div className="grid md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-bold text-purple-400 mb-3">Attack Vector Analysis</h4>
              <div className="space-y-2 text-sm">
                <div className="flex items-center space-x-2">
                  <Shield className="h-4 w-4 text-green-400" />
                  <span>Initial access vector was highly effective</span>
                </div>
                <div className="flex items-center space-x-2">
                  <AlertTriangle className="h-4 w-4 text-yellow-400" />
                  <span>Privilege escalation took longer than expected</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Eye className="h-4 w-4 text-blue-400" />
                  <span>Detection evasion techniques were successful</span>
                </div>
              </div>
            </div>
            
            <div>
              <h4 className="font-bold text-purple-400 mb-3">Defense Recommendations</h4>
              <div className="space-y-2 text-sm">
                <div className="flex items-center space-x-2">
                  <Lock className="h-4 w-4 text-green-400" />
                  <span>Implement additional input validation</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Activity className="h-4 w-4 text-blue-400" />
                  <span>Enable real-time monitoring on critical assets</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Shield className="h-4 w-4 text-purple-400" />
                  <span>Deploy behavioral analysis tools</span>
                </div>
              </div>
            </div>
          </div>
        </Card>
      )}
    </div>
  );
};

