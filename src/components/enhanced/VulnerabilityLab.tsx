import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { 
  Terminal, 
  Play, 
  Pause, 
  RotateCcw, 
  AlertTriangle, 
  Shield, 
  Target,
  Zap,
  Eye,
  Code,
  Database,
  Globe,
  Lock,
  Unlock,
  Bug,
  Activity
} from 'lucide-react';

interface VulnerabilityTest {
  id: string;
  name: string;
  category: 'web' | 'network' | 'system' | 'crypto';
  difficulty: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  description: string;
  points: number;
  completed: boolean;
  timeLimit: number; // in minutes
}

interface ScanResult {
  id: string;
  vulnerability: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  description: string;
  location: string;
  remediation: string;
  cvss: number;
}

export const VulnerabilityLab = () => {
  const [activeTab, setActiveTab] = useState('sandbox');
  const [targetUrl, setTargetUrl] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [scanResults, setScanResults] = useState<ScanResult[]>([]);
  const [selectedTest, setSelectedTest] = useState<VulnerabilityTest | null>(null);

  const vulnerabilityTests: VulnerabilityTest[] = [
    {
      id: 'sql-injection',
      name: 'SQL Injection Challenge',
      category: 'web',
      difficulty: 'intermediate',
      description: 'Exploit SQL injection vulnerabilities in a simulated e-commerce application',
      points: 250,
      completed: false,
      timeLimit: 30
    },
    {
      id: 'xss-challenge',
      name: 'Cross-Site Scripting Lab',
      category: 'web',
      difficulty: 'beginner',
      description: 'Find and exploit XSS vulnerabilities in various contexts',
      points: 150,
      completed: true,
      timeLimit: 20
    },
    {
      id: 'buffer-overflow',
      name: 'Buffer Overflow Exploitation',
      category: 'system',
      difficulty: 'expert',
      description: 'Exploit buffer overflow vulnerabilities in compiled binaries',
      points: 500,
      completed: false,
      timeLimit: 60
    },
    {
      id: 'crypto-weakness',
      name: 'Cryptographic Weakness Analysis',
      category: 'crypto',
      difficulty: 'advanced',
      description: 'Identify and exploit weak cryptographic implementations',
      points: 400,
      completed: false,
      timeLimit: 45
    }
  ];

  const startScan = async () => {
    if (!targetUrl.trim()) return;
    
    setIsScanning(true);
    setScanProgress(0);
    setScanResults([]);

    // Simulate scanning process
    const interval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          
          // Generate mock results
          const mockResults: ScanResult[] = [
            {
              id: '1',
              vulnerability: 'SQL Injection',
              severity: 'high',
              description: 'Potential SQL injection vulnerability detected in login form',
              location: '/login?username=admin',
              remediation: 'Use parameterized queries and input validation',
              cvss: 8.1
            },
            {
              id: '2',
              vulnerability: 'Cross-Site Scripting (XSS)',
              severity: 'medium',
              description: 'Reflected XSS vulnerability in search parameter',
              location: '/search?q=<script>',
              remediation: 'Implement proper output encoding and CSP headers',
              cvss: 6.1
            },
            {
              id: '3',
              vulnerability: 'Insecure Direct Object Reference',
              severity: 'medium',
              description: 'User can access other users\' data by modifying ID parameter',
              location: '/user/profile?id=123',
              remediation: 'Implement proper authorization checks',
              cvss: 5.4
            }
          ];
          setScanResults(mockResults);
          return 100;
        }
        return prev + 2;
      });
    }, 100);
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return 'text-green-400 border-green-400/50';
      case 'intermediate': return 'text-yellow-400 border-yellow-400/50';
      case 'advanced': return 'text-orange-400 border-orange-400/50';
      case 'expert': return 'text-red-400 border-red-400/50';
      default: return 'text-blue-400 border-blue-400/50';
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-400 border-red-400/50 bg-red-500/10';
      case 'high': return 'text-orange-400 border-orange-400/50 bg-orange-500/10';
      case 'medium': return 'text-yellow-400 border-yellow-400/50 bg-yellow-500/10';
      case 'low': return 'text-green-400 border-green-400/50 bg-green-500/10';
      default: return 'text-blue-400 border-blue-400/50 bg-blue-500/10';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'web': return <Globe className="h-4 w-4" />;
      case 'network': return <Activity className="h-4 w-4" />;
      case 'system': return <Terminal className="h-4 w-4" />;
      case 'crypto': return <Lock className="h-4 w-4" />;
      default: return <Bug className="h-4 w-4" />;
    }
  };

  return (
    <div className="max-w-7xl mx-auto p-6">
      <div className="mb-8">
        <h2 className="text-3xl font-bold text-primary mb-2 glitch" data-text="VULNERABILITY LAB">
          VULNERABILITY LAB
        </h2>
        <p className="text-muted-foreground">
          Sandboxed environment for ethical hacking and security testing
        </p>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
        <TabsList className="grid w-full grid-cols-4 bg-card/50 border border-primary/20">
          <TabsTrigger value="sandbox" className="data-[state=active]:bg-primary/20">
            <Terminal className="h-4 w-4 mr-2" />
            Sandbox
          </TabsTrigger>
          <TabsTrigger value="challenges" className="data-[state=active]:bg-primary/20">
            <Target className="h-4 w-4 mr-2" />
            Challenges
          </TabsTrigger>
          <TabsTrigger value="scanner" className="data-[state=active]:bg-primary/20">
            <Eye className="h-4 w-4 mr-2" />
            Scanner
          </TabsTrigger>
          <TabsTrigger value="exploits" className="data-[state=active]:bg-primary/20">
            <Zap className="h-4 w-4 mr-2" />
            Exploits
          </TabsTrigger>
        </TabsList>

        <TabsContent value="sandbox" className="space-y-6">
          <Card className="bg-card/50 backdrop-blur-sm border-primary/20 neon-border p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-xl font-bold text-primary">Isolated Testing Environment</h3>
              <Badge variant="outline" className="text-green-400 border-green-400/50">
                <Shield className="h-3 w-3 mr-1" />
                SECURE SANDBOX
              </Badge>
            </div>
            
            <div className="grid md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-primary mb-2">Target URL</label>
                  <Input
                    value={targetUrl}
                    onChange={(e) => setTargetUrl(e.target.value)}
                    placeholder="https://target-application.com"
                    className="bg-background/50 border-primary/30"
                  />
                </div>
                
                <div className="flex space-x-2">
                  <Button
                    onClick={startScan}
                    disabled={isScanning || !targetUrl.trim()}
                    className="bg-primary hover:bg-primary/80 neon-border flex-1"
                  >
                    <Play className="h-4 w-4 mr-2" />
                    {isScanning ? 'Scanning...' : 'Start Scan'}
                  </Button>
                  <Button variant="outline" className="border-red-400/50 text-red-400">
                    <RotateCcw className="h-4 w-4" />
                  </Button>
                </div>

                {isScanning && (
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Scanning progress</span>
                      <span>{scanProgress}%</span>
                    </div>
                    <Progress value={scanProgress} className="h-2" />
                  </div>
                )}
              </div>

              <div className="bg-background/50 rounded-lg p-4 border border-primary/20">
                <h4 className="text-sm font-bold text-primary mb-2">Terminal Output</h4>
                <ScrollArea className="h-32">
                  <div className="font-mono text-xs space-y-1">
                    <div className="text-green-400">$ nmap -sV -sC {targetUrl || 'target'}</div>
                    <div className="text-muted-foreground">Starting Nmap scan...</div>
                    {isScanning && (
                      <>
                        <div className="text-yellow-400">Discovering open ports...</div>
                        <div className="text-blue-400">Running vulnerability scripts...</div>
                        <div className="text-purple-400">Analyzing SSL/TLS configuration...</div>
                      </>
                    )}
                    <div className="text-green-400 typing-cursor">$</div>
                  </div>
                </ScrollArea>
              </div>
            </div>

            {scanResults.length > 0 && (
              <div className="mt-6">
                <h4 className="text-lg font-bold text-primary mb-4">Scan Results</h4>
                <div className="space-y-3">
                  {scanResults.map((result) => (
                    <Card key={result.id} className={`p-4 border ${getSeverityColor(result.severity)}`}>
                      <div className="flex items-start justify-between mb-2">
                        <div className="flex items-center space-x-2">
                          <AlertTriangle className="h-4 w-4" />
                          <span className="font-medium">{result.vulnerability}</span>
                        </div>
                        <Badge variant="outline" className={getSeverityColor(result.severity)}>
                          {result.severity.toUpperCase()} (CVSS: {result.cvss})
                        </Badge>
                      </div>
                      <p className="text-sm text-muted-foreground mb-2">{result.description}</p>
                      <div className="text-xs font-mono text-blue-400 mb-2">Location: {result.location}</div>
                      <div className="text-xs text-green-400">Remediation: {result.remediation}</div>
                    </Card>
                  ))}
                </div>
              </div>
            )}
          </Card>
        </TabsContent>

        <TabsContent value="challenges" className="space-y-6">
          <div className="grid md:grid-cols-2 gap-6">
            <div>
              <h3 className="text-xl font-bold text-primary mb-4">Hacking Challenges</h3>
              <div className="space-y-3">
                {vulnerabilityTests.map((test) => (
                  <Card
                    key={test.id}
                    className={`p-4 cursor-pointer transition-all duration-300 hover:scale-105 border ${
                      selectedTest?.id === test.id 
                        ? 'border-primary bg-primary/10' 
                        : 'border-primary/20 bg-card/50'
                    } ${test.completed ? 'opacity-75' : ''}`}
                    onClick={() => setSelectedTest(test)}
                  >
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center space-x-2">
                        {getCategoryIcon(test.category)}
                        <span className="font-medium">{test.name}</span>
                      </div>
                      {test.completed && (
                        <Badge className="bg-green-500/20 text-green-400 border-green-400/50">
                          COMPLETED
                        </Badge>
                      )}
                    </div>
                    <p className="text-sm text-muted-foreground mb-3">{test.description}</p>
                    <div className="flex items-center justify-between">
                      <Badge variant="outline" className={getDifficultyColor(test.difficulty)}>
                        {test.difficulty.toUpperCase()}
                      </Badge>
                      <div className="flex items-center space-x-2 text-sm">
                        <Zap className="h-3 w-3 text-yellow-400" />
                        <span className="text-yellow-400">{test.points} pts</span>
                      </div>
                    </div>
                  </Card>
                ))}
              </div>
            </div>

            {selectedTest && (
              <div>
                <Card className="bg-card/50 backdrop-blur-sm border-primary/20 neon-border p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-xl font-bold text-primary">{selectedTest.name}</h3>
                    <Badge variant="outline" className={getDifficultyColor(selectedTest.difficulty)}>
                      {selectedTest.difficulty.toUpperCase()}
                    </Badge>
                  </div>
                  
                  <p className="text-muted-foreground mb-4">{selectedTest.description}</p>
                  
                  <div className="space-y-3 mb-6">
                    <div className="flex justify-between text-sm">
                      <span>Points Reward:</span>
                      <span className="text-yellow-400 font-bold">{selectedTest.points}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>Time Limit:</span>
                      <span className="text-blue-400">{selectedTest.timeLimit} minutes</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>Category:</span>
                      <span className="text-purple-400 capitalize">{selectedTest.category}</span>
                    </div>
                  </div>

                  <div className="space-y-3">
                    <Button 
                      className="w-full bg-primary hover:bg-primary/80 neon-border"
                      disabled={selectedTest.completed}
                    >
                      <Play className="h-4 w-4 mr-2" />
                      {selectedTest.completed ? 'Challenge Completed' : 'Start Challenge'}
                    </Button>
                    
                    <Button variant="outline" className="w-full border-blue-400/50 text-blue-400">
                      <Eye className="h-4 w-4 mr-2" />
                      View Hints
                    </Button>
                  </div>
                </Card>

                {/* Challenge Environment */}
                <Card className="mt-4 bg-card/50 backdrop-blur-sm border-primary/20 neon-border p-4">
                  <h4 className="font-bold text-primary mb-3">Challenge Environment</h4>
                  <div className="bg-background/50 rounded p-3 border border-primary/20">
                    <div className="font-mono text-xs space-y-1">
                      <div className="text-green-400">$ ./start_challenge.sh {selectedTest.id}</div>
                      <div className="text-muted-foreground">Initializing isolated environment...</div>
                      <div className="text-blue-400">Target application deployed at: http://lab.eternyx.local:8080</div>
                      <div className="text-yellow-400">Monitoring tools available at: http://lab.eternyx.local:9090</div>
                      <div className="text-purple-400">Documentation: /opt/eternyx/docs/{selectedTest.category}</div>
                      <div className="text-green-400 typing-cursor">$</div>
                    </div>
                  </div>
                </Card>
              </div>
            )}
          </div>
        </TabsContent>

        <TabsContent value="scanner" className="space-y-6">
          <Card className="bg-card/50 backdrop-blur-sm border-primary/20 neon-border p-6">
            <h3 className="text-xl font-bold text-primary mb-4">Advanced Vulnerability Scanner</h3>
            
            <div className="grid md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-primary mb-2">Target Configuration</label>
                  <Input
                    value={targetUrl}
                    onChange={(e) => setTargetUrl(e.target.value)}
                    placeholder="https://target.com or 192.168.1.100"
                    className="bg-background/50 border-primary/30"
                  />
                </div>

                <div className="grid grid-cols-2 gap-3">
                  <Button variant="outline" size="sm" className="border-blue-400/50 text-blue-400">
                    <Database className="h-4 w-4 mr-2" />
                    SQL Injection
                  </Button>
                  <Button variant="outline" size="sm" className="border-purple-400/50 text-purple-400">
                    <Code className="h-4 w-4 mr-2" />
                    XSS Detection
                  </Button>
                  <Button variant="outline" size="sm" className="border-orange-400/50 text-orange-400">
                    <Shield className="h-4 w-4 mr-2" />
                    Auth Bypass
                  </Button>
                  <Button variant="outline" size="sm" className="border-red-400/50 text-red-400">
                    <Lock className="h-4 w-4 mr-2" />
                    Crypto Audit
                  </Button>
                </div>

                <Button
                  onClick={startScan}
                  disabled={isScanning || !targetUrl.trim()}
                  className="w-full bg-primary hover:bg-primary/80 neon-border"
                >
                  {isScanning ? (
                    <>
                      <Pause className="h-4 w-4 mr-2" />
                      Scanning...
                    </>
                  ) : (
                    <>
                      <Play className="h-4 w-4 mr-2" />
                      Execute Scan
                    </>
                  )}
                </Button>

                {isScanning && (
                  <div className="space-y-2">
                    <Progress value={scanProgress} className="h-2" />
                    <div className="text-xs text-muted-foreground text-center">
                      {scanProgress < 30 && 'Port discovery...'}
                      {scanProgress >= 30 && scanProgress < 60 && 'Service enumeration...'}
                      {scanProgress >= 60 && scanProgress < 90 && 'Vulnerability testing...'}
                      {scanProgress >= 90 && 'Generating report...'}
                    </div>
                  </div>
                )}
              </div>

              <div className="bg-background/50 rounded-lg p-4 border border-primary/20">
                <h4 className="text-sm font-bold text-primary mb-3">Scan Output</h4>
                <ScrollArea className="h-64">
                  <div className="font-mono text-xs space-y-1">
                    <div className="text-green-400">ETERNYX Advanced Scanner v3.1</div>
                    <div className="text-blue-400">Target: {targetUrl || 'Not specified'}</div>
                    <div className="text-muted-foreground">Status: {isScanning ? 'ACTIVE' : 'IDLE'}</div>
                    {isScanning && (
                      <>
                        <div className="text-yellow-400">Probing target infrastructure...</div>
                        <div className="text-purple-400">Analyzing response patterns...</div>
                        <div className="text-cyan-400">Cross-referencing vulnerability database...</div>
                      </>
                    )}
                    <div className="text-green-400 typing-cursor">$</div>
                  </div>
                </ScrollArea>
              </div>
            </div>
          </Card>

          {scanResults.length > 0 && (
            <Card className="bg-card/50 backdrop-blur-sm border-primary/20 neon-border p-6">
              <h3 className="text-xl font-bold text-primary mb-4">Vulnerability Report</h3>
              <div className="space-y-4">
                {scanResults.map((result) => (
                  <Card key={result.id} className={`p-4 border ${getSeverityColor(result.severity)}`}>
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex items-center space-x-2">
                        <AlertTriangle className="h-5 w-5" />
                        <span className="font-bold">{result.vulnerability}</span>
                      </div>
                      <Badge variant="outline" className={getSeverityColor(result.severity)}>
                        {result.severity.toUpperCase()}
                      </Badge>
                    </div>
                    <p className="text-sm text-muted-foreground mb-2">{result.description}</p>
                    <div className="text-xs font-mono text-blue-400 mb-2">
                      Location: {result.location}
                    </div>
                    <div className="text-xs text-green-400">
                      Remediation: {result.remediation}
                    </div>
                    <div className="mt-3 flex space-x-2">
                      <Button size="sm" variant="outline" className="text-xs">
                        <Code className="h-3 w-3 mr-1" />
                        Exploit
                      </Button>
                      <Button size="sm" variant="outline" className="text-xs">
                        <Eye className="h-3 w-3 mr-1" />
                        Details
                      </Button>
                    </div>
                  </Card>
                ))}
              </div>
            </Card>
          )}
        </TabsContent>

        <TabsContent value="challenges">
          <div className="text-center py-12">
            <Target className="h-16 w-16 text-primary mx-auto mb-4 animate-pulse" />
            <h3 className="text-xl font-bold text-primary mb-2">Gamified Security Challenges</h3>
            <p className="text-muted-foreground">
              Interactive challenges coming soon. Master your skills through hands-on practice.
            </p>
          </div>
        </TabsContent>

        <TabsContent value="exploits">
          <div className="text-center py-12">
            <Zap className="h-16 w-16 text-primary mx-auto mb-4 animate-pulse" />
            <h3 className="text-xl font-bold text-primary mb-2">Exploit Development Kit</h3>
            <p className="text-muted-foreground">
              Advanced exploit development tools and frameworks for security researchers.
            </p>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

